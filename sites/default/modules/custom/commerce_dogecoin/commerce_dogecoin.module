<?php
/*
/**
 * @file
 * Provides a payment method and currency for Drupal Commerce via Dogecoin
 *
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_dogecoin_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_dogecoin'] = array(
    'title' => t('Dogecoin payment gateway'),
    'description' => t('Provides a payment solution as DOGE currency (Dogecoin)'),
    'active' => TRUE,
    'callbacks' => array(
      'settings_form' => 'commerce_dogecoin_settings_form',
    ),

  );

  return $payment_methods;
}


/**
 * Get the existing dogecoin payment address
 */
function _commerce_dogecoin_get_payment_address($order) {

  $address = db_select('commerce_dogecoin', 'cb')
    ->fields('cb', array('dogecoin_address'))
    ->condition('order_id', $order->order_id)
    ->execute();

  if ($address->rowCount()) {
    $info = $address->fetch();
    return $info->dogecoin_address;
  }

  return FALSE;
}


function commerce_dogecoin_commerce_order_view($order, $view_mode) {
  if (!empty($order->commerce_dogecoin)) {
    $order->content['dogecoin'] = array(
      '#type' => 'markup',
      '#markup' => $order->commerce_dogecoin['dogecoin_address']
    );
  }
}


/**
 * Implementation of hook_entity_load
 *
 * Add the existing Dogecoin payment address to the order if it exists
 *
 * @param $entities
 * @param $type
 */
function commerce_dogecoin_entity_load($entities, $type) {
  if ($type == 'commerce_order') {

    foreach ($entities as $entity) {
      // Check for an existing payment address based on this Order(object)
      if ($address = _commerce_dogecoin_get_payment_address($entity)) {

        // If we have one, create some payment details
        $entity->commerce_dogecoin = array();
        $entity->commerce_dogecoin['dogecoin_address'] = $address;

      }
    }
  }
}

/**
 * declare a new BTC currency
 *
 */
function commerce_dogecoin_commerce_currency_info() {
  return array(
    'BTC' => array(
      'code' => 'DOGE',
      'symbol' => 'DOGE',
      'decimals' => 8,
      'name' => t('Dogecoin'),
      'numeric_code' => '',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Coins'),
      'major_unit' => t('Coins')
    )
  );
}


/**
 * Set up the Dogecoin payment method settings form.
 */
function commerce_dogecoin_settings_form($settings = array()) {
  $form = array();

  $help = "Local \"dogecoind\" or \"dogecoin-qt\" example would be <i>http://user:password@127.0.0.1:8332/</i><br />";
  $help .= "Blockchain.info example <i>https://username:password@rpc.blockchain.info</i>";

  $form['dogecoin_server_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Dogecoin Server URI'),
    '#default_value' => !empty($settings['dogecoin_server_uri']) ? $settings['dogecoin_server_uri'] : '',
    '#description' => t('Address of your Dogecoin connection') . '<br/>' . $help,
    '#required' => TRUE,
    '#element_validate' => array('commerce_dogecoin_settings_form_validate'),
  );

  return $form;
}

/**
 * Payment method callback: submit form element validation.
 */
function commerce_dogecoin_settings_form_validate($element, &$form_state) {
  // Test the URL provided is valid

  if(!valid_url($element['#value'], true)) {
    form_set_error('dogecoin_server_uri', t("Invalid URL specified for your Dogecoin server URI, must be https:// or http://"));
    return;
  }

  // Test that we can connect to the given URL
  if (_commerce_dogecoin_inc()) {
    $dogecoin = new dogecoinClient($element['#value']);
    if (!$dogecoin->testConnection()) {
      drupal_set_message('Warning, Unable to connect to given Dogecoin server URI', 'warning');
    }
    else {
      drupal_set_message('Succesfully tested your Dogecoin connection.');
    }
  }
  else {
    form_set_error('dogecoin_server_uri', t("Unable to find the JSONRPC library"));
  }
}

/**
 * Implements hook_commerce_checkout_pane_info()
 */
function commerce_dogecoin_commerce_checkout_pane_info() {
  $panes['commerce_dogecoin'] = array(
    'title' => t('Dogecoin Payment Details'),
    'page' => 'complete',
    'weight' => 10,
    'file' => 'includes/commerce_dogecoin.checkout_pane.inc',
    'base' => 'commerce_dogecoin_pane',
  );
  return $panes;
}

/**
 * Payment method callback: checkout form submission.
 * Connect with your dogecoin endpoint and get an address
 */
function commerce_dogecoin_submit_form_submit($payment_method, $pane_form, $pane_values, &$order, $charge) {

  if (_commerce_dogecoin_inc()) {

    $dogecoin = new dogecoinClient($payment_method['settings']['dogecoin_server_uri']);
    if ($dogecoin->testConnection()) {
      // @todo record total amount in here for debug purpose
      $address = $dogecoin->getnewaddress(t('Order ID') . " : " . $order->order_id);

      // Record it for the future, this is attached at any later stage via hook_entity_load
      db_insert('commerce_dogecoin')
        ->fields(array(
          'order_id' => $order->order_id,
          'dogecoin_address' => $address,
        ))
        ->execute();
    }
    else {
      drupal_set_message(t('Problem communicating with the Dogecoin backend'));
      watchdog('commerce_dogecoin', 'Unable to connect to dogecoin backend', array(), WATCHDOG_ERROR);
      return FALSE;
    }
  }
}

/**
 * Implementation of hook_cron
 *
 * Go through all the open BTC transactions and find ones that have paid
 * Also set to 'cancelled' those not recieved within 7 days
 */
function commerce_dogecoin_cron() {

  // Our Dogecoin interface.
  $dogecoin = FALSE;

  // @todo Do this properly so all instances are checked, or some more clever feedback/callback system

  // Get the payment instance configuration
  $instance_id = "commerce_dogecoin" . '|' . "commerce_payment_commerce_dogecoin";
  if (!$payment_instance = commerce_payment_method_instance_load($instance_id)) {
    watchdog('commerce_dogecoin', 'Commerce Dogecoin enabled but not configured, skipping cron');
    return FALSE;
  }

  if (!$payment_instance['active']) {
    return FALSE;
  }

  if (_commerce_dogecoin_inc()) {

    // prepare the orders to check
    $query = db_select('commerce_order', 'co');
    $query->join('commerce_dogecoin', 'cb', 'co.order_id = cb.order_id');
    $query->fields('cb');
    $query->addField('co', 'status');
    $query->addTag('commerce_dogecoin');
    $result = $query->execute();

    // @todo configurable or use rules somehow
    $allowed_status = array('pending', 'processing');
    foreach ($result as $order) {
      if (in_array($order->status, $allowed_status)) {
        $original_order = commerce_order_load($order->order_id);

        // Initialise the dogecoin inteface if it's not up yet.
        if (!$dogecoin) {
          $dogecoin = new dogecoinClient($payment_instance['settings']['dogecoin_server_uri']);
          if (!$dogecoin->testConnection()) {
            watchdog('commerce_dogecoin', 'Error communicating with Dogecoin server whilst looking for transactions');
            return FALSE;
          }
        }

        // Validate this is a real address on this server (incase they switch wallets or something)
        $address_valid = $dogecoin->validateaddress($order->dogecoin_address);

        if (!$address_valid['ismine'] || !$address_valid['isvalid']) {
          watchdog(
            'commerce_dogecoin',
            'Invalid/Unknown receiving address found @address for Order ID @order_id',
            array(
              '@address' => $order->dogecoin_address,
              '@order_id' => $order->order_id,
            )
          );
          // Skip to next
          continue;
        }

        // Ask the backend how much this address has paid, if it's reached the amount, mark as complete
        // @todo include config for minimum confirmations

        $received = 0;
        try {
          $received = $dogecoin->getreceivedbyaddress($order->dogecoin_address, variable_get('commerce_dogecoin_min_confirm', 3));
        } catch (Exception $e) {
          watchdog(
            'commerce_dogecoin',
            'Error communicating with Dogecoin server whilst checking transaction @address, skipping.',
            array('@address' => $order->dogecoin_address)
          );
          // incase there is some serious issue, skip
          continue;
        }

        // this is stored in cents total, needs to be back to normalised BTC style
        $total = $original_order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100;

        if ($received >= $total) {
          // Record the payment transaction
          $transaction = commerce_payment_transaction_new('commerce_dogecoin', $order->order_id);
          $transaction->instance_id = $instance_id;
          $transaction->amount = $received;
          $transaction->currency_code = "BTC";
          $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
          $transaction->message = 'Name: @name';
          $transaction->message_variables = array('@name' => "Dogecoin server payment");

          // Save the transaction, Commerce will know if this is now paid in full and your rules should move it along
          commerce_payment_transaction_save($transaction);
        }
      }
    }
  }
}


/**
 * Finds and loads the jsonrpc library
 * @note: taken from 'less' module example as it's easy to expand
 */
function _commerce_dogecoin_inc() {
  static $loaded = NULL;


  if (!isset($loaded)) {

    // Locations to check for jsonrpc, by order of preference.
    $include_locations = array();

    // Ensure libraries module is loaded.
    module_load_include('module', 'libraries');

    $include_locations[] = libraries_get_path('jsonrpcphp') . '/includes/jsonRPCClient.php';

    foreach ($include_locations as $include_location) {
      if (is_file($include_location)) {
        require_once $include_location;
        break;
      }
    }

    $loaded = class_exists('jsonRPCClient', TRUE);

  }

  if ($loaded) {
    // include the Dogecoin interface
    include_once(drupal_get_path('module', 'commerce_dogecoin') . '/includes/dogecoin.inc');
  }

  return $loaded;
}


